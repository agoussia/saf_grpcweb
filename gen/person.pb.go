// Code generated by protoc-gen-go. DO NOT EDIT.
// source: proto/person.proto

package gen // import "github.com/saf_grpcweb/gen"

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type Person struct {
	FirstName            string   `protobuf:"bytes,1,opt,name=firstName" json:"firstName,omitempty"`
	LastName             string   `protobuf:"bytes,2,opt,name=lastName" json:"lastName,omitempty"`
	Address              *Address `protobuf:"bytes,3,opt,name=address" json:"address,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Person) Reset()         { *m = Person{} }
func (m *Person) String() string { return proto.CompactTextString(m) }
func (*Person) ProtoMessage()    {}
func (*Person) Descriptor() ([]byte, []int) {
	return fileDescriptor_person_0eeb13b0cb276347, []int{0}
}
func (m *Person) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Person.Unmarshal(m, b)
}
func (m *Person) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Person.Marshal(b, m, deterministic)
}
func (dst *Person) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Person.Merge(dst, src)
}
func (m *Person) XXX_Size() int {
	return xxx_messageInfo_Person.Size(m)
}
func (m *Person) XXX_DiscardUnknown() {
	xxx_messageInfo_Person.DiscardUnknown(m)
}

var xxx_messageInfo_Person proto.InternalMessageInfo

func (m *Person) GetFirstName() string {
	if m != nil {
		return m.FirstName
	}
	return ""
}

func (m *Person) GetLastName() string {
	if m != nil {
		return m.LastName
	}
	return ""
}

func (m *Person) GetAddress() *Address {
	if m != nil {
		return m.Address
	}
	return nil
}

func init() {
	proto.RegisterType((*Person)(nil), "ui.Person")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// BuyerServiceClient is the client API for BuyerService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type BuyerServiceClient interface {
	GetPersonInfo(ctx context.Context, in *Ack, opts ...grpc.CallOption) (*Person, error)
	SetPersonInfo(ctx context.Context, in *Person, opts ...grpc.CallOption) (*Ack, error)
}

type buyerServiceClient struct {
	cc *grpc.ClientConn
}

func NewBuyerServiceClient(cc *grpc.ClientConn) BuyerServiceClient {
	return &buyerServiceClient{cc}
}

func (c *buyerServiceClient) GetPersonInfo(ctx context.Context, in *Ack, opts ...grpc.CallOption) (*Person, error) {
	out := new(Person)
	err := c.cc.Invoke(ctx, "/ui.BuyerService/GetPersonInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *buyerServiceClient) SetPersonInfo(ctx context.Context, in *Person, opts ...grpc.CallOption) (*Ack, error) {
	out := new(Ack)
	err := c.cc.Invoke(ctx, "/ui.BuyerService/SetPersonInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// BuyerServiceServer is the server API for BuyerService service.
type BuyerServiceServer interface {
	GetPersonInfo(context.Context, *Ack) (*Person, error)
	SetPersonInfo(context.Context, *Person) (*Ack, error)
}

func RegisterBuyerServiceServer(s *grpc.Server, srv BuyerServiceServer) {
	s.RegisterService(&_BuyerService_serviceDesc, srv)
}

func _BuyerService_GetPersonInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Ack)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BuyerServiceServer).GetPersonInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ui.BuyerService/GetPersonInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BuyerServiceServer).GetPersonInfo(ctx, req.(*Ack))
	}
	return interceptor(ctx, in, info, handler)
}

func _BuyerService_SetPersonInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Person)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BuyerServiceServer).SetPersonInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ui.BuyerService/SetPersonInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BuyerServiceServer).SetPersonInfo(ctx, req.(*Person))
	}
	return interceptor(ctx, in, info, handler)
}

var _BuyerService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "ui.BuyerService",
	HandlerType: (*BuyerServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetPersonInfo",
			Handler:    _BuyerService_GetPersonInfo_Handler,
		},
		{
			MethodName: "SetPersonInfo",
			Handler:    _BuyerService_SetPersonInfo_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/person.proto",
}

func init() { proto.RegisterFile("proto/person.proto", fileDescriptor_person_0eeb13b0cb276347) }

var fileDescriptor_person_0eeb13b0cb276347 = []byte{
	// 218 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0x12, 0x2a, 0x28, 0xca, 0x2f,
	0xc9, 0xd7, 0x2f, 0x48, 0x2d, 0x2a, 0xce, 0xcf, 0xd3, 0x03, 0x73, 0x84, 0x98, 0x4a, 0x33, 0xa5,
	0x84, 0x21, 0xe2, 0x89, 0x29, 0x29, 0x45, 0xa9, 0xc5, 0xc5, 0x10, 0x09, 0x29, 0x7e, 0xa8, 0x60,
	0x72, 0x36, 0x44, 0x40, 0x29, 0x93, 0x8b, 0x2d, 0x00, 0xac, 0x53, 0x48, 0x86, 0x8b, 0x33, 0x2d,
	0xb3, 0xa8, 0xb8, 0xc4, 0x2f, 0x31, 0x37, 0x55, 0x82, 0x51, 0x81, 0x51, 0x83, 0x33, 0x08, 0x21,
	0x20, 0x24, 0xc5, 0xc5, 0x91, 0x93, 0x08, 0x95, 0x64, 0x02, 0x4b, 0xc2, 0xf9, 0x42, 0xaa, 0x5c,
	0xec, 0x50, 0x5b, 0x24, 0x98, 0x15, 0x18, 0x35, 0xb8, 0x8d, 0xb8, 0xf5, 0x4a, 0x33, 0xf5, 0x1c,
	0x21, 0x42, 0x41, 0x30, 0x39, 0xa3, 0x28, 0x2e, 0x1e, 0xa7, 0xd2, 0xca, 0xd4, 0xa2, 0xe0, 0xd4,
	0xa2, 0xb2, 0xcc, 0xe4, 0x54, 0x21, 0x15, 0x2e, 0x5e, 0xf7, 0xd4, 0x12, 0x88, 0xed, 0x9e, 0x79,
	0x69, 0xf9, 0x42, 0xec, 0x60, 0x6d, 0xc9, 0xd9, 0x52, 0x5c, 0x20, 0x06, 0xd4, 0x59, 0x2a, 0x5c,
	0xbc, 0xc1, 0x28, 0xaa, 0x90, 0x24, 0xa5, 0x60, 0x3a, 0x9c, 0x64, 0xa2, 0xa4, 0xd2, 0x33, 0x4b,
	0x32, 0x4a, 0x93, 0xf4, 0x92, 0xf3, 0x73, 0xf5, 0x8b, 0x13, 0xd3, 0xe2, 0xd3, 0x8b, 0x0a, 0x92,
	0xcb, 0x53, 0x93, 0xf4, 0xd3, 0x53, 0xf3, 0x92, 0xd8, 0xc0, 0x7e, 0x35, 0x06, 0x04, 0x00, 0x00,
	0xff, 0xff, 0x83, 0x1d, 0x7f, 0xb6, 0x2b, 0x01, 0x00, 0x00,
}
